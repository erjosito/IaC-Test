{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "nicName": {
            "defaultValue": "myNic",
            "type": "string"
        },
        "ipConfigName": {
            "defaultValue": "myIpConfig",
            "type": "string"
        },
        "vnetName": {
            "defaultValue": "myVnet",
            "type": "string"
        },
        "subnetName": {
            "defaultValue": "serverSubnet",
            "type": "string"
        },
        "slbYesNo": {
            "defaultValue": "no",
            "type": "string"
        },
        "slbName": {
            "defaultValue": "mySLB",
            "type": "string"
        },
        "backendConfigName": {
            "defaultValue": "myBackendConfig",
            "type": "string"
        },
        "pipYesNo": {
            "defaultValue": "no",
            "type": "string",
            "allowedValues": [ "yes","no" ]
        },
        "azYesNo": {
            "defaultValue": "no",
            "type": "string",
            "allowedValues": [ "yes","no" ]
        },
		"az": {
			"defaultValue": "1",
			"type": "string",
            "allowedValues": [ "1","2","3" ]
		},
        "nsgYesNo": {
            "defaultValue": "no",
            "type": "string",
            "allowedValues": [ "yes","no" ]
        },
        "lbSku": {
            "defaultValue": "basic",
            "type": "string",
            "allowedValues": [ "basic","standard" ],
            "metadata": { "description": "Whether Load Balancers should be Basic or Standard (preview)" }
        },
        "baseRepoURL": {
            "defaultValue": "https://raw.githubusercontent.com/erjosito/IaC-Test/master/",
            "type": "string",
            "metadata": { "description": "URL where the nested templates are downloaded from" }
        }
    },
    "variables": {
        "deploymentApiVersion": "2017-08-01",
        "networkApiVersion": "2017-09-01",
        "nsgName": "[concat(parameters('nicName'), '-nsg')]",
        "pipName": "[concat(parameters('nicName'), '-pip')]",
        "nicIpConfigHash": {
            "yes": {
                "yes": {
                    "name": "[parameters('ipConfigName')]",
                    "properties": {
                        "privateIPAllocationMethod": "Dynamic",
                        "publicIPAddress": {
                            "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('pipName'))]"
                        },
                        "subnet": {
                            "id": "[concat(resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName')), '/subnets/', parameters('subnetName'))]"
                        },
                        "loadBalancerBackendAddressPools": [
                            {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', parameters('slbName')), '/backendAddressPools/', parameters('backendConfigName'))]"
                            }
                        ]
                    }
                },
                "no": {
                    "name": "[parameters('ipConfigName')]",
                    "properties": {
                        "privateIPAllocationMethod": "Dynamic",
                        "publicIPAddress": {
                            "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('pipName'))]"
                        },
                        "subnet": {
                            "id": "[concat(resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName')), '/subnets/', parameters('subnetName'))]"
                        }
                    }
                }
            },
            "no": {
                "yes": {
                    "name": "[parameters('ipConfigName')]",
                    "properties": {
                        "privateIPAllocationMethod": "Dynamic",
                        "subnet": {
                            "id": "[concat(resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName')), '/subnets/', parameters('subnetName'))]"
                        },
                        "loadBalancerBackendAddressPools": [
                            {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', parameters('slbName')), '/backendAddressPools/', parameters('backendConfigName'))]"
                            }
                        ]
                    }
                },
                "no": {
                    "name": "[parameters('ipConfigName')]",
                    "properties": {
                        "privateIPAllocationMethod": "Dynamic",
                        "subnet": {
                            "id": "[concat(resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName')), '/subnets/', parameters('subnetName'))]"
                        }
                    }
                }
            }
        },
        "nicIpConfig": "[variables('nicIpConfigHash')[parameters('pipYesNo')][parameters('slbYesNo')]]",
        "zonesHash": {
            "yes": [ "[parameters('az')]"],
            "no": []
        },
        "zones": "[variables('zonesHash')[parameters('azYesNo')]]",
        "dummyDeploymentName": "[concat(parameters('nicName'), '-dummy')]",
        "dummyDeploymentTemplate": "[concat(parameters('baseRepoURL'), 'nothing.json')]",
        "nicDependsOnPipHash": {
            "yes": "[variables('pipName')]",
            "no": "[variables('dummyDeploymentName')]"
        },
        "nicDependsOnPip": "[variables('nicDependsOnPipHash')[parameters('pipYesNo')]]",
        "pipSku": "[parameters('lbSku')]",
        "pipAllocationHash": {
            "basic": "Dynamic",
            "standard": "Static"
        },
        "pipAllocation": "[variables('pipAllocationHash')[variables('pipSku')]]",
        "nicDependsOnNsgHash": {
            "yes": "[variables('nsgName')]",
            "no": "[variables('dummyDeploymentName')]"
        },
        "nicDependsOnNsg": "[variables('nicDependsOnNsgHash')[parameters('nsgYesNo')]]",
        "nicNsgHash": {
            "yes": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
            },
            "no": {
            }
        },
        "nicNsg": "[variables('nicNsgHash')[parameters('nsgYesNo')]]"
    },
    "resources": [
        {
            "comments": "Public IP address with or without AZs",
            "condition": "[equals(parameters('pipYesNo'), 'yes')]",
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[variables('pipName')]",
            "apiVersion": "[variables('networkApiVersion')]",
            "location": "[resourceGroup().location]",
            "sku": {
                "name": "[variables('pipSku')]"
            },
            "properties": {
                "publicIPAllocationMethod": "[variables('pipAllocation')]",
                "idleTimeoutInMinutes": 4
            },
            "zones": "[variables('zones')]",
            "resources": [],
            "dependsOn": []
        },
        {
            "comments": "Create Network Security Group only if instructed by the parameter 'nsgYesNo'",
            "condition": "[equals(parameters('nsgYesNo'), 'yes')]",
            "type": "Microsoft.Network/networkSecurityGroups",
            "name": "[variables('nsgName')]",
            "apiVersion": "[variables('networkApiVersion')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "securityRules": [
                    {
                        "name": "default-allow-ssh",
                        "properties": {
                            "protocol": "TCP",
                            "sourcePortRange": "*",
                            "destinationPortRange": "22",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 1000,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "default-allow-web",
                        "properties": {
                            "protocol": "TCP",
                            "sourcePortRange": "*",
                            "destinationPortRange": "80",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 1010,
                            "direction": "Inbound"
                        }
                    }
                ]
            },
            "resources": [],
            "dependsOn": []
        },
		{
			"comments": "Dummy Deployment for fake dependency for the NIC, in case no PIP or NSG is required",
            "name": "[variables('dummyDeploymentName')]",
			"type": "Microsoft.Resources/deployments",
			"apiVersion": "[variables('deploymentApiVersion')]",
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[variables('dummyDeploymentTemplate')]",
					"contentVersion": "1.0.0.0"
				},
				"parameters":  {}
			},
            "dependsOn": []
        },
        {
			"comments": "Create NIC",
            "type": "Microsoft.Network/networkInterfaces",
            "name": "[parameters('nicName')]",
            "apiVersion": "[variables('networkApiVersion')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "ipConfigurations": [
                    "[variables('nicIpConfig')]"
                ],
                "dnsSettings": {
                    "dnsServers": []
                },
                "enableIPForwarding": false,
                "networkSecurityGroup": "[variables('nicNsg')]"
            },
            "resources": [],
            "dependsOn": [
                "[variables('nsgName')]", "[variables('nicDependsOnPip')]", "[variables('nicDependsOnNsg')]"  
            ]
        }
    ]
}